🧠 What is Logical Replication?
Logical replication in PostgreSQL is a streaming-based, real-time data replication mechanism that replicates specific tables from one PostgreSQL instance to another — even across environments (cloud ↔️ on-prem).
Unlike physical replication (which replicates the entire storage), logical replication only streams row-level data changes (INSERT, UPDATE, DELETE). 

🔀 Selective data sharing
🌐 Multi-environment synchronization
📊 Analytics offloading
🚀 Incremental migrations
🎯 Key Use Cases
📈 Real-time analytics/reporting offloaded to a replica
☁️ Hybrid cloud setups (cloud + on-prem)
🔁 Data migration from AWS RDS to local environments
🛡️ Disaster recovery planning

✅ Step-by-Step Setup
🔹 On AWS RDS PostgreSQL (Source)
Step 1: Modify RDS Parameter Group
Parameter Value
rds.logical_replication 1
wal_level logical
max_replication_slots 10
max_wal_senders 10
max_connections 100

Apply the parameter group to the RDS instance and reboot.

Step 2: Create a Replication User
CREATE ROLE replication_user WITH LOGIN REPLICATION PASSWORD 'Password';

Step 3: Create a Publication

CREATE PUBLICATION my_publication FOR ALL TABLES;

🔹 On On-Prem PostgreSQL (Target)
Step 1: Update postgresql.conf

wal_level = logical
max_replication_slots = 10
max_wal_senders = 10
Restart the PostgreSQL service after changes.

Step 2: Edit pg_hba.conf
Add entries to allow replication from RDS (RDS IP):

host replication replication_user <RDS_Public_IP>/32 md5
Reload Post.conf

Step 3: Create the Subscription

CREATE SUBSCRIPTION my_subscription
CONNECTION 'host=<rds-endpoint> port=5432 dbname=database user=replication_user password=Password'
PUBLICATION my_publication
WITH (create_slot = true, enabled = true);

✅ Advantages
🔄 Real-time sync between cloud and on-prem
📌 Selective table replication
🧩 Low overhead using native PostgreSQL tools
☁️ Hybrid cloud ready
📊 Ideal for reporting, analytics & DR environments

⚠️ Disadvantages
❌ No DDL replication — schema changes aren’t replicated
🧱 Schema must match exactly
🚫 No user/password replication — roles and passwords must be managed manually
⚠️ No sequence synchronization
🛜 Network-dependent table, secure connection required 
🔒 Password stored in plain text in subscription string
🧰 Requires manual monitoring and conflict handling
